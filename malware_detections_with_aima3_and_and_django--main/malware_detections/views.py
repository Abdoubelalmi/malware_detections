import json
from django.shortcuts import render
from django.http import JsonResponse
from aima3.logic import FolKB, expr, fol_fc_ask

# Define global agenda and working memory
agenda = []
working_memory = {}

def add_to_agenda(task):
    agenda.append(task)

def update_working_memory(key, value):
    working_memory[key] = value

def process_preferences(preferences, kb):
    global working_memory
    # Initialize an empty list for recommended restaurants
    malware_detections = []

    # Update working memory with user preferences
    for key, value in preferences.items():
        update_working_memory(key, value)

    # Process agenda tasks
    while agenda:
        task = agenda.pop(0)
        if task == 'malware_detections':
            malware_detections.extend(malware_detections.generate_detections(preferences))
        # Add more tasks as needed

    return malware_detections

def malware_detections(request):
    if request.method == 'POST':
        # Process the user's preferences
        body_unicode = request.body.decode('utf-8')
        preferences = json.loads(body_unicode)
        print(preferences)

kb = FolKB()

# Define global agenda and working memory
agenda = []
working_memory = {}

def add_to_agenda(task):
    agenda.append(task)

def update_working_memory(key, value):
    working_memory[key] = value

# Add expressions to knowledge base (replace with your rules)
kb.tell(expr("EncryptsFiles") & expr("RequestsRansom") >> expr("Ransomware"))
kb.tell(expr("ModifiesBootProcess") >> expr("Bootkit"))
kb.tell(expr("HasRansomNote") & expr("HasNetworkActivity") >> expr("Ransomware"))
kb.tell(expr("DetectsSandbox") >> expr("SandboxDetection"))
kb.tell(expr("DeletesShadowCopies") >> expr("DataWiper"))
kb.tell(expr("DisablesSecuritySoftware") >> expr("AntiSecurity"))
kb.tell(expr("ExecutesPowershell") >> expr("PowerShellUsage"))
kb.tell(expr("UsesExploitationTools") >> expr("ExploitationTools"))
kb.tell(expr("HasNetworkActivity") & expr("ExecutesPowershell") >> expr("C2Communication"))
kb.tell(expr("ModifiesRegistry") >> expr("RegistryModification"))
kb.tell(expr("AltersSystemConfiguration") >> expr("SystemConfigurationAlteration"))
kb.tell(expr("UnusualOutboundTraffic") >> expr("UnusualTraffic"))
kb.tell(expr("UnusualProcessBehavior") >> expr("ProcessAnomaly"))
kb.tell(expr("CreatesHiddenFiles") >> expr("HiddenFilesCreation"))
kb.tell(expr("SuspiciousCommandLineArguments") >> expr("CommandLineAnomaly"))
kb.tell(expr("AttemptsCodeInjection") >> expr("CodeInjection"))
# Add more rules as needed

# Function to process user responses and detect malware
def malware_detections(preferences):
    # Convert preferences to expressions and check for activated expressions
    activated = fol_fc_ask(kb, preferences.items())

    # Process activated expressions to detect malware
    detected_malware = []

    # Example detections (replace with your logic)
    # If certain preferences are activated, add corresponding malware detections
    if expr("Ransomware") in activated:
        detected_malware.append("Ransomware Detected")

    if expr("Bootkit") in activated:
        detected_malware.append("Bootkit Detected")

    if expr("SandboxDetection") in activated:
        detected_malware.append("Sandbox Detection Detected")

    if expr("DataWiper") in activated:
        detected_malware.append("Data Wiper Detected")

    if expr("AntiSecurity") in activated:
        detected_malware.append("Anti-Security Software Detected")

    if expr("PowerShellUsage") in activated:
        detected_malware.append("PowerShell Usage Detected")

    if expr("ExploitationTools") in activated:
        detected_malware.append("Exploitation Tools Usage Detected")

    if expr("C2Communication") in activated:
        detected_malware.append("Command and Control Communication Detected")

    if expr("RegistryModification") in activated:
        detected_malware.append("Registry Modification Detected")

    if expr("SystemConfigurationAlteration") in activated:
        detected_malware.append("System Configuration Alteration Detected")

    if expr("UnusualTraffic") in activated:
        detected_malware.append("Unusual Traffic Detected")

    if expr("ProcessAnomaly") in activated:
        detected_malware.append("Process Anomaly Detected")

    if expr("HiddenFilesCreation") in activated:
        detected_malware.append("Hidden Files Creation Detected")

    if expr("CommandLineAnomaly") in activated:
        detected_malware.append("Command Line Anomaly Detected")

    if expr("CodeInjection") in activated:
        detected_malware.append("Code Injection Detected")

    # Add more detections based on activated expressions

    return detected_malware

# Function to handle POST request for malware detection
def malware_detection_view(request):
    if request.method == 'POST':
        # Process the user's preferences sent in the request body
        preferences = json.loads(request.body)

        # Detect malware based on user preferences
        detected_malware = malware_detections(preferences)

        # Prepare response data with detected malware
        response_data = {'detected_malware': detected_malware}

        # Return JSON response with detected malware
        return JsonResponse(response_data)

    else:
        # If not a POST request, return empty response or handle differently
        return JsonResponse({})


# Render home page
def home_view(request):
    return render(request, 'home.html')
